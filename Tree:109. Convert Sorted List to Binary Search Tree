/*  109. Convert Sorted List to Binary Search Tree
    Link: https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
ListNode *inorderHead;
    
    TreeNode* sortedListToBST(ListNode* head) {
        int len=0;
        for(auto node=head;node;node=node->next) len++;
        inorderHead=head;
        return inorder(0,len-1);
    }
    
    TreeNode* inorder(int s , int e){
        if(s>e) return NULL;
        int mid=s+(e-s)/2;
        
        auto leftTree=inorder(s,mid-1);
        auto root=new TreeNode(inorderHead->val);
        inorderHead=inorderHead->next;
        
        auto rightTree=inorder(mid+1,e);
        
        root->left=leftTree;
        root->right=rightTree;
        
        return root;
    }
};
