/* 208. Implement Trie (Prefix Tree)
   Link: https://leetcode.com/problems/implement-trie-prefix-tree/description/
*/
struct TrieNode {
    char c;
    bool isTerminal;
    vector<TrieNode*> child;
    
    TrieNode(char c) :c(c), isTerminal(false) {
        child = vector<TrieNode*>(26, nullptr);
    }
    
    TrieNode* add(char ch) {
        if(child[ch-'a']==nullptr)
            child[ch-'a'] = new TrieNode(ch);
        
        return child[ch-'a'];
    }
    
    TrieNode* query(char ch) {
        return child[ch-'a'];
    }
};

class Trie {
private:
    TrieNode* const root;
public:
    Trie() : root(new TrieNode(0)) {}
    
    void insert(string word) {
        TrieNode* curr = root;
        for(char c: word) {
            curr = curr->add(c);
        }
        curr->isTerminal = true;
    }
    
    bool search(string word) {
        int n = word.size();
        TrieNode* curr = root;
        for(int i=0; i<n && curr!=nullptr; i++) {
            curr = curr->query(word[i]);
        }
        return curr ? curr->isTerminal : false;
    }
    
    bool startsWith(string prefix) {
        int n = prefix.size();
        TrieNode* curr = root;
        for(int i=0; i<n && curr!=nullptr; i++) {
            curr = curr->query(prefix[i]);
        }
        return curr;
    }
};
