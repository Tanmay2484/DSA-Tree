/*  662. Maximum Width of Binary Tree
   Link: https://leetcode.com/problems/maximum-width-of-binary-tree/description/
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
    long long res = 0;
    vector<pair<TreeNode*, long long>> q{{ root, 0 }};
    while (!q.empty()) {
        vector<pair<TreeNode*, long long>> q1;
        long long left = INT_MAX;
        for (auto [node, pos] : q) {
            if (left == INT_MAX)
                left = pos;
            if (node->left != nullptr)
                q1.push_back({node->left, (pos - left) * 2});
            if (node->right != nullptr)
                q1.push_back({node->right, (pos - left) * 2 + 1});
            res = max(res, pos - left);
        }
        swap(q, q1);
    }
    return res + 1;
}
};
