/* Two Sum IV - Input is a BST
  Link: https://leetcode.com/problems/two-sum-iv-input-is-a-bst/description/
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    
    vector<int> ourVec;
    
	// Put nubmers into vector in order.
    void pushNumbers(vector<int>& ourVec, TreeNode* root) {
        if (!root) return;
        pushNumbers(ourVec, root->left);
        ourVec.push_back(root->val);
        pushNumbers(ourVec, root->right);
        return;
    }
    
public:
    bool findTarget(TreeNode* root, int k) {
        pushNumbers(ourVec, root);
        // ourVec is sorted in ascending order
        int vecSize = ourVec.size();
		
		// Need two numbers, if there is only one, quit.
        if (vecSize == 1) return false;
		// Do some simple tests, taking advantage of the fact that the vecctor is sorted.
        if (k > ourVec[vecSize - 1] + ourVec[vecSize - 2]) return false;
        if (k < ourVec[0] + ourVec[1]) return false;
        for (int i{}; i < vecSize; ++i) {
            for (int j{}; j < vecSize; ++j) {
			// Numbers cannot be the same.
                if (j == i) continue;
                if (ourVec[i] + ourVec[j] == k) return true;
            }
        }
        return false;
    }
};
