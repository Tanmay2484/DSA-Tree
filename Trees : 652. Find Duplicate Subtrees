/* 652. Find Duplicate Subtrees
   Link: https://leetcode.com/problems/find-duplicate-subtrees/description/
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*>res;
        unordered_map<string,int>mp;
        inorder(root,res,mp);
        return res;
    }
    
    string inorder(TreeNode * node , vector<TreeNode*>&res, unordered_map<string,int>&m ){
        if(!node) return "";
        
        string s="";
        s+="(";
        s+=inorder(node->left,res,m);
        s+=to_string(node->val);
        s+=inorder(node->right,res,m);
        s+=")";
        
        if(m[s]==1) res.push_back(node);
        
        m[s]++;
        
        return s;
    }
};
